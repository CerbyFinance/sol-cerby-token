/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface CrossChainBridgeV2Contract
  extends Truffle.Contract<CrossChainBridgeV2Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<CrossChainBridgeV2Instance>;
}

export interface ApprovedBurnProof {
  name: "ApprovedBurnProof";
  args: {
    burnProofHash: string;
    0: string;
  };
}

export interface ProofOfBurn {
  name: "ProofOfBurn";
  args: {
    srcToken: string;
    destToken: string;
    srcCaller: string;
    destCaller: string;
    srcAmount: BN;
    srcNonce: BN;
    srcChainType: BN;
    srcChainId: BN;
    destChainType: BN;
    destChainId: BN;
    burnProofHash: string;
    0: string;
    1: string;
    2: string;
    3: string;
    4: BN;
    5: BN;
    6: BN;
    7: BN;
    8: BN;
    9: BN;
    10: string;
  };
}

export interface ProofOfMint {
  name: "ProofOfMint";
  args: {
    srcToken: string;
    destToken: string;
    srcCaller: string;
    destCaller: string;
    destAmount: BN;
    srcChainType: BN;
    srcChainId: BN;
    destChainType: BN;
    destChainId: BN;
    burnProofHash: string;
    0: string;
    1: string;
    2: string;
    3: string;
    4: BN;
    5: BN;
    6: BN;
    7: BN;
    8: BN;
    9: string;
  };
}

export interface RoleAdminChanged {
  name: "RoleAdminChanged";
  args: {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface RoleGranted {
  name: "RoleGranted";
  args: {
    role: string;
    account: string;
    sender: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface RoleRevoked {
  name: "RoleRevoked";
  args: {
    role: string;
    account: string;
    sender: string;
    0: string;
    1: string;
    2: string;
  };
}

type AllEvents =
  | ApprovedBurnProof
  | ProofOfBurn
  | ProofOfMint
  | RoleAdminChanged
  | RoleGranted
  | RoleRevoked;

export interface CrossChainBridgeV2Instance extends Truffle.ContractInstance {
  ROLE_ADMIN(txDetails?: Truffle.TransactionDetails): Promise<string>;

  allowances(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

  approveBurnProof: {
    (proofHash: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      proofHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      proofHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      proofHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnAndCreateProof: {
    (
      _srcToken: string,
      destToken: string,
      destCaller: string,
      srcAmount: number | BN | string,
      destChainType: number | BN | string,
      destChainId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _srcToken: string,
      destToken: string,
      destCaller: string,
      srcAmount: number | BN | string,
      destChainType: number | BN | string,
      destChainId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _srcToken: string,
      destToken: string,
      destCaller: string,
      srcAmount: number | BN | string,
      destChainType: number | BN | string,
      destChainId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _srcToken: string,
      destToken: string,
      destCaller: string,
      srcAmount: number | BN | string,
      destChainType: number | BN | string,
      destChainId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnProofStorage(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getRoleAdmin(
    role: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getRoleMember(
    role: string,
    index: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getRoleMemberCount(
    role: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  grantRole: {
    (
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  grantRolesBulk: {
    (
      roles: { role: string; addr: string }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      roles: { role: string; addr: string }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      roles: { role: string; addr: string }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      roles: { role: string; addr: string }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  hasRole(
    role: string,
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  mintWithBurnProof: {
    (
      _srcToken: string,
      destToken: string,
      destCaller: string,
      destChainType: number | BN | string,
      destChainId: number | BN | string,
      destBurnProofHash: string,
      destAmount: number | BN | string,
      destNonce: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _srcToken: string,
      destToken: string,
      destCaller: string,
      destChainType: number | BN | string,
      destChainId: number | BN | string,
      destBurnProofHash: string,
      destAmount: number | BN | string,
      destNonce: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _srcToken: string,
      destToken: string,
      destCaller: string,
      destChainType: number | BN | string,
      destChainId: number | BN | string,
      destBurnProofHash: string,
      destAmount: number | BN | string,
      destNonce: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _srcToken: string,
      destToken: string,
      destCaller: string,
      destChainType: number | BN | string,
      destChainId: number | BN | string,
      destBurnProofHash: string,
      destAmount: number | BN | string,
      destNonce: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceRole: {
    (
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  revokeRole: {
    (
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setAllowance: {
    (
      srcToken: string,
      destToken: string,
      destChainType: number | BN | string,
      destChainId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      srcToken: string,
      destToken: string,
      destChainType: number | BN | string,
      destChainId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      srcToken: string,
      destToken: string,
      destChainType: number | BN | string,
      destChainId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      srcToken: string,
      destToken: string,
      destChainType: number | BN | string,
      destChainId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  srcNonceByToken(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  supportsInterface(
    interfaceId: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  methods: {
    ROLE_ADMIN(txDetails?: Truffle.TransactionDetails): Promise<string>;

    allowances(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    approveBurnProof: {
      (proofHash: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        proofHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        proofHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        proofHash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    burnAndCreateProof: {
      (
        _srcToken: string,
        destToken: string,
        destCaller: string,
        srcAmount: number | BN | string,
        destChainType: number | BN | string,
        destChainId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _srcToken: string,
        destToken: string,
        destCaller: string,
        srcAmount: number | BN | string,
        destChainType: number | BN | string,
        destChainId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _srcToken: string,
        destToken: string,
        destCaller: string,
        srcAmount: number | BN | string,
        destChainType: number | BN | string,
        destChainId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _srcToken: string,
        destToken: string,
        destCaller: string,
        srcAmount: number | BN | string,
        destChainType: number | BN | string,
        destChainId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    burnProofStorage(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getRoleAdmin(
      role: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getRoleMember(
      role: string,
      index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getRoleMemberCount(
      role: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    grantRole: {
      (
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    grantRolesBulk: {
      (
        roles: { role: string; addr: string }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        roles: { role: string; addr: string }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        roles: { role: string; addr: string }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        roles: { role: string; addr: string }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    hasRole(
      role: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    mintWithBurnProof: {
      (
        _srcToken: string,
        destToken: string,
        destCaller: string,
        destChainType: number | BN | string,
        destChainId: number | BN | string,
        destBurnProofHash: string,
        destAmount: number | BN | string,
        destNonce: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _srcToken: string,
        destToken: string,
        destCaller: string,
        destChainType: number | BN | string,
        destChainId: number | BN | string,
        destBurnProofHash: string,
        destAmount: number | BN | string,
        destNonce: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _srcToken: string,
        destToken: string,
        destCaller: string,
        destChainType: number | BN | string,
        destChainId: number | BN | string,
        destBurnProofHash: string,
        destAmount: number | BN | string,
        destNonce: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _srcToken: string,
        destToken: string,
        destCaller: string,
        destChainType: number | BN | string,
        destChainId: number | BN | string,
        destBurnProofHash: string,
        destAmount: number | BN | string,
        destNonce: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    renounceRole: {
      (
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    revokeRole: {
      (
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        role: string,
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setAllowance: {
      (
        srcToken: string,
        destToken: string,
        destChainType: number | BN | string,
        destChainId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        srcToken: string,
        destToken: string,
        destChainType: number | BN | string,
        destChainId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        srcToken: string,
        destToken: string,
        destChainType: number | BN | string,
        destChainId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        srcToken: string,
        destToken: string,
        destChainType: number | BN | string,
        destChainId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    srcNonceByToken(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    supportsInterface(
      interfaceId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
