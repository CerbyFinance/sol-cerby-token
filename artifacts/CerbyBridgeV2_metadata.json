{
	"compiler": {
		"version": "0.8.11+commit.d7f03943"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					}
				],
				"name": "AccountIsMissingRole",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "CanOnlyRenounceRoleForSelf",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "CerbyBridgeV2_AlreadyApproved",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "CerbyBridgeV2_AmountIsLessThanBridgeFees",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "CerbyBridgeV2_AmountMustNotExceedAvailableBalance",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "CerbyBridgeV2_DirectionAllowanceWasNotFound",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "CerbyBridgeV2_InvalidGenericCallerLength",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "CerbyBridgeV2_InvalidGenericTokenLength",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "CerbyBridgeV2_InvalidPackageLength",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "CerbyBridgeV2_ProofIsNotApprovedOrAlreadyExecuted",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "CerbyBridgeV2_ProvidedHashIsInvalid",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "CerbyBridgeV2_TokenAndCallerMustBeEqualForEvmBridging",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "burnProofHash",
						"type": "bytes32"
					}
				],
				"name": "ApprovedBurnProofHash",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bool",
						"name": "isBurn",
						"type": "bool"
					},
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "burnProofHash",
								"type": "bytes32"
							},
							{
								"internalType": "bytes",
								"name": "burnGenericCaller",
								"type": "bytes"
							},
							{
								"internalType": "uint64",
								"name": "burnNonce",
								"type": "uint64"
							},
							{
								"internalType": "bytes",
								"name": "mintGenericCaller",
								"type": "bytes"
							},
							{
								"internalType": "uint256",
								"name": "mintAmount",
								"type": "uint256"
							},
							{
								"components": [
									{
										"internalType": "bytes",
										"name": "burnGenericToken",
										"type": "bytes"
									},
									{
										"internalType": "uint8",
										"name": "burnChainType",
										"type": "uint8"
									},
									{
										"internalType": "uint32",
										"name": "burnChainId",
										"type": "uint32"
									},
									{
										"internalType": "bytes",
										"name": "mintGenericToken",
										"type": "bytes"
									},
									{
										"internalType": "uint8",
										"name": "mintChainType",
										"type": "uint8"
									},
									{
										"internalType": "uint32",
										"name": "mintChainId",
										"type": "uint32"
									}
								],
								"internalType": "struct CerbyBridgeV2.Allowance",
								"name": "allowance",
								"type": "tuple"
							}
						],
						"indexed": false,
						"internalType": "struct CerbyBridgeV2.Proof",
						"name": "proof",
						"type": "tuple"
					}
				],
				"name": "ProofOfBurnOrMint",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "previousAdminRole",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "newAdminRole",
						"type": "bytes32"
					}
				],
				"name": "RoleAdminChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleGranted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleRevoked",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "ROLE_ADMIN",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "ROLE_APPROVER",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "allowances",
				"outputs": [
					{
						"internalType": "enum CerbyBridgeV2.AllowanceStatus",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "proofHash",
						"type": "bytes32"
					}
				],
				"name": "approveBurnProof",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "burnAmount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "burnToken",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "mintGenericToken",
						"type": "bytes"
					},
					{
						"internalType": "bytes",
						"name": "mintGenericCaller",
						"type": "bytes"
					},
					{
						"internalType": "uint8",
						"name": "mintChainType",
						"type": "uint8"
					},
					{
						"internalType": "uint32",
						"name": "mintChainId",
						"type": "uint32"
					}
				],
				"name": "burnAndCreateProof",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "burnNonceByToken",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "burnProofStorage",
				"outputs": [
					{
						"internalType": "enum CerbyBridgeV2.States",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "chainToFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes",
								"name": "burnGenericToken",
								"type": "bytes"
							},
							{
								"internalType": "uint8",
								"name": "burnChainType",
								"type": "uint8"
							},
							{
								"internalType": "uint32",
								"name": "burnChainId",
								"type": "uint32"
							},
							{
								"internalType": "bytes",
								"name": "mintGenericToken",
								"type": "bytes"
							},
							{
								"internalType": "uint8",
								"name": "mintChainType",
								"type": "uint8"
							},
							{
								"internalType": "uint32",
								"name": "mintChainId",
								"type": "uint32"
							}
						],
						"internalType": "struct CerbyBridgeV2.Allowance",
						"name": "_allowance",
						"type": "tuple"
					}
				],
				"name": "getAllowanceHashMint2Burn",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint8",
						"name": "chainType",
						"type": "uint8"
					},
					{
						"internalType": "uint32",
						"name": "chainId",
						"type": "uint32"
					}
				],
				"name": "getChainHash",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					}
				],
				"name": "getRoleAdmin",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "getRoleMember",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					}
				],
				"name": "getRoleMemberCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "grantRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "role",
								"type": "bytes32"
							},
							{
								"internalType": "address",
								"name": "addr",
								"type": "address"
							}
						],
						"internalType": "struct RoleAccess[]",
						"name": "roles",
						"type": "tuple[]"
					}
				],
				"name": "grantRolesBulk",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "hasRole",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "burnGenericToken",
						"type": "bytes"
					},
					{
						"internalType": "bytes",
						"name": "burnGenericCaller",
						"type": "bytes"
					},
					{
						"internalType": "uint8",
						"name": "burnChainType",
						"type": "uint8"
					},
					{
						"internalType": "uint32",
						"name": "burnChainId",
						"type": "uint32"
					},
					{
						"internalType": "bytes32",
						"name": "burnProofHash",
						"type": "bytes32"
					},
					{
						"internalType": "uint64",
						"name": "burnNonce",
						"type": "uint64"
					},
					{
						"internalType": "address",
						"name": "mintToken",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "mintAmount",
						"type": "uint256"
					}
				],
				"name": "mintWithBurnProof",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "renounceRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "revokeRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes",
								"name": "burnGenericToken",
								"type": "bytes"
							},
							{
								"internalType": "uint8",
								"name": "burnChainType",
								"type": "uint8"
							},
							{
								"internalType": "uint32",
								"name": "burnChainId",
								"type": "uint32"
							},
							{
								"internalType": "bytes",
								"name": "mintGenericToken",
								"type": "bytes"
							},
							{
								"internalType": "uint8",
								"name": "mintChainType",
								"type": "uint8"
							},
							{
								"internalType": "uint32",
								"name": "mintChainId",
								"type": "uint32"
							}
						],
						"internalType": "struct CerbyBridgeV2.Allowance[]",
						"name": "_allowances",
						"type": "tuple[]"
					},
					{
						"internalType": "enum CerbyBridgeV2.AllowanceStatus",
						"name": "_status",
						"type": "uint8"
					}
				],
				"name": "setAllowancesBulk",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32[]",
						"name": "chainsTo",
						"type": "bytes32[]"
					},
					{
						"internalType": "uint256",
						"name": "fee",
						"type": "uint256"
					}
				],
				"name": "setChainsToFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"getRoleAdmin(bytes32)": {
					"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
				},
				"getRoleMember(bytes32,uint256)": {
					"details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
				},
				"getRoleMemberCount(bytes32)": {
					"details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
				},
				"grantRole(bytes32,address)": {
					"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
				},
				"hasRole(bytes32,address)": {
					"details": "Returns `true` if `account` has been granted `role`."
				},
				"renounceRole(bytes32,address)": {
					"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
				},
				"revokeRole(bytes32,address)": {
					"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
				},
				"supportsInterface(bytes4)": {
					"details": "See {IERC165-supportsInterface}."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"sol-defifactory-token/CerbyBridgeV2.sol": "CerbyBridgeV2"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"sol-defifactory-token/CerbyBridgeV2.sol": {
			"keccak256": "0xa45d7435929beebc5ef9d91c1f25815a7ab906ce73e1d8c89f9443fb2c8103af",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://f951ea2eb17cb0ef53357670dbb8a18d49bdf7be70d6ae46b9d003e1a1343e3b",
				"dweb:/ipfs/QmYZ4oZc78Q5hh8mgKfN54R87WKkR4LGbpKj4cwLka8oJ5"
			]
		},
		"sol-defifactory-token/interfaces/ICerbySwapV1.sol": {
			"keccak256": "0x177dd0dfb6f91a49c24abe6d6a78773aefee6e2fe75a82b6cc0ecf709d7ea476",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://714920a33fab7cb88a5448c34c3ea9515ada7c7d2850894d72a1cecad6c0cf70",
				"dweb:/ipfs/QmVdW8KdQXec4nf6aDTeqiHKqYzqZPkejskB6TzcgtHrAC"
			]
		},
		"sol-defifactory-token/interfaces/ICerbyTokenMinterBurner.sol": {
			"keccak256": "0x2e737a3ef8e66c4f88d1da86b213994f322ff36fdc623b2dcc514b73a93e5631",
			"license": "BSD-2-Clause",
			"urls": [
				"bzz-raw://caf7e0e9e86d083eb669adf07269c3191a9eec50e39409189e0a3e2780fcd780",
				"dweb:/ipfs/QmdzdSZS4KvuxEgmqoaRQ5TSqMnxiyLzcbC39cfm3XxCtw"
			]
		},
		"sol-defifactory-token/openzeppelin/access/AccessControl.sol": {
			"keccak256": "0x7e251d1731d996d5bdb10933452752cf227986b46f442f924f78ff6c8529e1b4",
			"license": "MIT",
			"urls": [
				"bzz-raw://2146c03c51ea415cd9ca211329ec9c7ba78da92e7a9c28d3487a0a7f3ea3907e",
				"dweb:/ipfs/QmUehehA3SFUGkeuSXo7TVvtx7S5NJXSmbnQqM7qp9YYZN"
			]
		},
		"sol-defifactory-token/openzeppelin/access/AccessControlEnumerable.sol": {
			"keccak256": "0x400e79893c3e86fe147ce1e6916987d8f90351136496bb9fa7d0c33ecf194378",
			"license": "MIT",
			"urls": [
				"bzz-raw://6f3c9ea28f53c46abce10f71c3a61720a435ff0667414d48b4a94d590c8fca8e",
				"dweb:/ipfs/QmTcBSf9QJh4Q5QbLewHquxcZ8kcWe1pBCVZvxuMaqP28F"
			]
		},
		"sol-defifactory-token/openzeppelin/access/IAccessControl.sol": {
			"keccak256": "0x877d384529229341c5fed501f100c735612a03c91e11106ac162fff0ca40ffa0",
			"license": "MIT",
			"urls": [
				"bzz-raw://8dafdd87105f533ba5506a008923b5095e05351800fe2197f1284834127814b7",
				"dweb:/ipfs/QmTyxcBSwKRue8LNEqURiJEv7tnvBCQCoz9Ack36tzh33U"
			]
		},
		"sol-defifactory-token/openzeppelin/access/IAccessControlEnumerable.sol": {
			"keccak256": "0xaac4e60985b08b34f95df096f9f7818586ae2157f426e6aa30abeceee47a7090",
			"license": "MIT",
			"urls": [
				"bzz-raw://2649ee0862526030b38cd15c65a8d0d61614d6d3f526de8b1b48ccbdf8672cd4",
				"dweb:/ipfs/QmPwCik5omsKx4zkwyS8hYT9NwQMvpZ84cS8XawRNXspuJ"
			]
		},
		"sol-defifactory-token/openzeppelin/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"sol-defifactory-token/openzeppelin/utils/Strings.sol": {
			"keccak256": "0x02018f8b309ced925726ae517b3c46238bca0dad3be97489f61791f8bc4ba63c",
			"license": "MIT",
			"urls": [
				"bzz-raw://5025c50c98a5b0783badbd683b03e8b75c65860dcc4d165e7ffae49b33cf49c5",
				"dweb:/ipfs/QmYth2o8MrwXVkWVy16qnTLj9TbcrA3zP7gMD6JoqidxF2"
			]
		},
		"sol-defifactory-token/openzeppelin/utils/introspection/ERC165.sol": {
			"keccak256": "0x80cff4f25810ab85caa3f5839b7cb5b7683a9540da82268e2b9f422e0d4d58e6",
			"license": "MIT",
			"urls": [
				"bzz-raw://1858a5438e273c2f48db04bfa9e49e5a5bbf5ccb36b1c666756647aacfca2a04",
				"dweb:/ipfs/QmR1bYQhYWtRLLXMyRJYtZRaEmXkbFGWHcd6a59VKrFgMR"
			]
		},
		"sol-defifactory-token/openzeppelin/utils/introspection/IERC165.sol": {
			"keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
			"license": "MIT",
			"urls": [
				"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
				"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
			]
		},
		"sol-defifactory-token/openzeppelin/utils/structs/EnumerableSet.sol": {
			"keccak256": "0x8acb4b6655fa152ff8fc79cd0682c2862d56512547bcaa591c5bcc2657e6b86a",
			"license": "MIT",
			"urls": [
				"bzz-raw://39a93fe24137aa2e913b16f2bec6746d59696dc9cf2b62065366357b68d5689d",
				"dweb:/ipfs/Qmb9pgaSpvASizwM5CaRqtA1x1RRd74PQCahvXTuZZMx2V"
			]
		}
	},
	"version": 1
}