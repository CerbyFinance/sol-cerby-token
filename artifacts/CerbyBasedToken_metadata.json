{
	"compiler": {
		"version": "0.8.12+commit.f00d7308"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_name",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_symbol",
						"type": "string"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					}
				],
				"name": "AccountIsMissingRole",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "CanOnlyRenounceRoleForSelf",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "CerbyBasedToken_AlreadyInitialized",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "CerbyBasedToken_ContractIsNotPaused",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "CerbyBasedToken_ContractIsPaused",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "CerbyCronJobsExecution_TransactionsAreTemporarilyDisabled",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ECDSA_InvalidSignature",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ECDSA_InvalidSignatureLength",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ECDSA_InvalidSignatureSValue",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ECDSA_InvalidSignatureVValue",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ERC20Permit_ExpiredDeadline",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ERC20Permit_InvalidSignature",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "_sender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "BurnHumanAddress",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "_recipient",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "MintHumanAddress",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "previousAdminRole",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "newAdminRole",
						"type": "bytes32"
					}
				],
				"name": "RoleAdminChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleGranted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleRevoked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "_sender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "_recipient",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "TransferCustom",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "DOMAIN_SEPARATOR",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "ROLE_ADMIN",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "ROLE_BURNER",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "ROLE_MINTER",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "ROLE_MODERATOR",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "ROLE_TRANSFERER",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_spender",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_account",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "burnHumanAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_subtractedValue",
						"type": "uint256"
					}
				],
				"name": "decreaseAllowance",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					}
				],
				"name": "getRoleAdmin",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "getRoleMember",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					}
				],
				"name": "getRoleMemberCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_pos",
						"type": "uint256"
					}
				],
				"name": "getUtilsContractAtPos",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "grantRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "role",
								"type": "bytes32"
							},
							{
								"internalType": "address",
								"name": "addr",
								"type": "address"
							}
						],
						"internalType": "struct RoleAccess[]",
						"name": "roles",
						"type": "tuple[]"
					}
				],
				"name": "grantRolesBulk",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "hasRole",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_addedValue",
						"type": "uint256"
					}
				],
				"name": "increaseAllowance",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isPaused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "mintHumanAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_sender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "moderatorTransferFromWhilePaused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "nonces",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pauseContract",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "v",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "permit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "renounceRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "resumeContract",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "revokeRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_sender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "transferCustom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_sender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_name",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_symbol",
						"type": "string"
					}
				],
				"name": "updateNameAndSymbol",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"DOMAIN_SEPARATOR()": {
					"details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
				},
				"allowance(address,address)": {
					"details": "See {IERC20-allowance}."
				},
				"approve(address,uint256)": {
					"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
				},
				"balanceOf(address)": {
					"details": "See {IERC20-balanceOf}."
				},
				"decimals()": {
					"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
				},
				"decreaseAllowance(address,uint256)": {
					"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
				},
				"getRoleAdmin(bytes32)": {
					"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
				},
				"getRoleMember(bytes32,uint256)": {
					"details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
				},
				"getRoleMemberCount(bytes32)": {
					"details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
				},
				"grantRole(bytes32,address)": {
					"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
				},
				"hasRole(bytes32,address)": {
					"details": "Returns `true` if `account` has been granted `role`."
				},
				"increaseAllowance(address,uint256)": {
					"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
				},
				"name()": {
					"details": "Returns the name of the token."
				},
				"nonces(address)": {
					"details": "See {IERC20Permit-nonces}."
				},
				"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
					"details": "See {IERC20Permit-permit}."
				},
				"renounceRole(bytes32,address)": {
					"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
				},
				"revokeRole(bytes32,address)": {
					"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
				},
				"supportsInterface(bytes4)": {
					"details": "See {IERC165-supportsInterface}."
				},
				"symbol()": {
					"details": "Returns the symbol of the token, usually a shorter version of the name."
				},
				"totalSupply()": {
					"details": "See {IERC20-totalSupply}."
				},
				"transfer(address,uint256)": {
					"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
				},
				"transferFrom(address,address,uint256)": {
					"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"sol-defifactory-token/CerbyBasedToken.sol": "CerbyBasedToken"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"sol-cerby-swap-v1/contracts/CerbyCronJobsExecution.sol": {
			"keccak256": "0xbe5b226f30beb42adac900e264d35b96252c0221b1489f5b18e7621feb82f9ac",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://30e02520d6f9b41e5d1d9de05034d9b721075b2da02b342845a058ccab1c441a",
				"dweb:/ipfs/QmSU2RJoRsWfNVKfMQvNfyEgPpi8RZLsjajiqRV6RNNr18"
			]
		},
		"sol-cerby-swap-v1/contracts/interfaces/ICerbyBotDetection.sol": {
			"keccak256": "0xbc95b2664c6eba1c562504b57a6a8c384104b29d516d7a50adc88bc7690f7838",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://5766813310ea6a93f250416a9047fbfbfaff52e2fcd136c9b8ad74c3b195553b",
				"dweb:/ipfs/QmSEutKMBmwTsmJjTa3M6MrtXhi4VbLTzizrRmPuuvcx4e"
			]
		},
		"sol-cerby-swap-v1/contracts/interfaces/ICerbyToken.sol": {
			"keccak256": "0xd773b000eb1082d4a19994a9de798f5e45f56b3e07360a1d35734e75b92f1b5f",
			"license": "MIT",
			"urls": [
				"bzz-raw://9dc20c13496ab3fecdcc17eeef774fb5fe818a65f15ef96affc310278b8a5445",
				"dweb:/ipfs/QmbZqGDLrknz2ZYNLjGvVztYMGpAhspiPawhqve6A1D4yy"
			]
		},
		"sol-cerby-swap-v1/openzeppelin/access/AccessControl.sol": {
			"keccak256": "0x625f544696a4c39ea49999e0a17846a97f67f1c86f9baec4e408e4d7088a0081",
			"license": "MIT",
			"urls": [
				"bzz-raw://cf5daee5cf45dcd95d749efaab6154f725e9e4c6da6cd4ef294e0e919eaf82af",
				"dweb:/ipfs/QmW3M3YzDBTcbYVpEmWKWssyd37QsWD9S4zrsWaq5bRN4E"
			]
		},
		"sol-cerby-swap-v1/openzeppelin/access/AccessControlEnumerable.sol": {
			"keccak256": "0x400e79893c3e86fe147ce1e6916987d8f90351136496bb9fa7d0c33ecf194378",
			"license": "MIT",
			"urls": [
				"bzz-raw://6f3c9ea28f53c46abce10f71c3a61720a435ff0667414d48b4a94d590c8fca8e",
				"dweb:/ipfs/QmTcBSf9QJh4Q5QbLewHquxcZ8kcWe1pBCVZvxuMaqP28F"
			]
		},
		"sol-cerby-swap-v1/openzeppelin/access/IAccessControl.sol": {
			"keccak256": "0x39cf384e5d33ace3043a89089ab368b4c3a93e8b209c928b194f02dc037213b4",
			"license": "MIT",
			"urls": [
				"bzz-raw://2e843a398bf56fa1bc11580bc539f6452ec3c317a161d7bc70d6a1205763e8f9",
				"dweb:/ipfs/QmToa4vPGpg6S5n29MGEbACXS42euGLWcvBixo7txkrcdD"
			]
		},
		"sol-cerby-swap-v1/openzeppelin/access/IAccessControlEnumerable.sol": {
			"keccak256": "0xaac4e60985b08b34f95df096f9f7818586ae2157f426e6aa30abeceee47a7090",
			"license": "MIT",
			"urls": [
				"bzz-raw://2649ee0862526030b38cd15c65a8d0d61614d6d3f526de8b1b48ccbdf8672cd4",
				"dweb:/ipfs/QmPwCik5omsKx4zkwyS8hYT9NwQMvpZ84cS8XawRNXspuJ"
			]
		},
		"sol-cerby-swap-v1/openzeppelin/token/ERC20/ERC20.sol": {
			"keccak256": "0x99ba8c1c84a651554e5a322def0c91a5e66cd044af743607ba5a4e929fc6dbd0",
			"license": "MIT",
			"urls": [
				"bzz-raw://3fd0aca1f5cf3badd418e99197274c6b065b6fb838da0349c4e60d22f3a0c3f0",
				"dweb:/ipfs/QmYX3KQffKjr5eYdAspYbyc8x3iW3nfM3xRZ2C9Pcmo2Pp"
			]
		},
		"sol-cerby-swap-v1/openzeppelin/token/ERC20/IERC20.sol": {
			"keccak256": "0x4c931415bad9f190cef05b8a2b2309d4a703b9f5175eac41f58bb648e57a1985",
			"license": "MIT",
			"urls": [
				"bzz-raw://c8cedde9ca509a64a97298c161399ed22304ed959dcb5ef3eb7e7d8a67fa7ba1",
				"dweb:/ipfs/QmQQdJKLhKpADGg6yzQYZ3SNz6AmQFNjGfafMwncMTDxpF"
			]
		},
		"sol-cerby-swap-v1/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol": {
			"keccak256": "0x3b9347741cbe8875e50ef51a75a2c2d866113f7541724b824cd2254b5729d3f1",
			"license": "MIT",
			"urls": [
				"bzz-raw://134c2e2464bf302745edbdb66e7510fe74ed43575f4596f9b5ccc865fd591c7c",
				"dweb:/ipfs/QmfCLdiZgnizLns3c7U6e73RH6pAXgeqySZ6NWH7quN46G"
			]
		},
		"sol-cerby-swap-v1/openzeppelin/token/ERC20/extensions/draft-ERC20Permit.sol": {
			"keccak256": "0xc6656029503ba98f72acbee536f8477181b21e8ff42f9ef864c20bd5027a3abd",
			"license": "MIT",
			"urls": [
				"bzz-raw://81738067457db987ce419f4cef42ac1104970613ef63b1edce949c6534d71290",
				"dweb:/ipfs/QmPzQo6y5Gtc763JhGKFKnBsALQLATYEbjRi2nsmUEjoJT"
			]
		},
		"sol-cerby-swap-v1/openzeppelin/token/ERC20/extensions/draft-IERC20Permit.sol": {
			"keccak256": "0x0930bbc575bfb8f1f29f08c88074923a5faa9039f2a3ee445b34484a114e3d1a",
			"license": "MIT",
			"urls": [
				"bzz-raw://296f4a72e44d95fac564193c342111cade24493757ac2c423f242d95e8615ef5",
				"dweb:/ipfs/QmboAknwDp2qscAEbLCvPAJ5H4QG4UF8aFmazqQQHJWxrb"
			]
		},
		"sol-cerby-swap-v1/openzeppelin/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"sol-cerby-swap-v1/openzeppelin/utils/Counters.sol": {
			"keccak256": "0xa9be843c6d8ef362e1d5aa3f56866b53782ab2b78eed06d19e2477740fb56eda",
			"license": "MIT",
			"urls": [
				"bzz-raw://96b170a19ee1c5ab790bac0a6099f80c974223f25316f38f6b9ae823b10806db",
				"dweb:/ipfs/QmWn6URyauJR6gz4BgGBe2UEQbZYE5isbr8GYsZownm275"
			]
		},
		"sol-cerby-swap-v1/openzeppelin/utils/Strings.sol": {
			"keccak256": "0x301f818a468d58adca752b80f0c0332628a61227e726bb1b04020805868e3806",
			"license": "MIT",
			"urls": [
				"bzz-raw://d4053cc4d0a627c22c85f1f26b8332220d1f08d2978efa5e4e069b7e706639ba",
				"dweb:/ipfs/QmQSu9Z5SmAE1gSibNJSmyHDbQQwFtbdF3Pn9JkCKLGw4n"
			]
		},
		"sol-cerby-swap-v1/openzeppelin/utils/cryptography/ECDSA.sol": {
			"keccak256": "0xeff78de3fb3cb86a7508e7b6e8326f3d8f95618a3d4fe2623cd54006dec1e8d3",
			"license": "MIT",
			"urls": [
				"bzz-raw://fa99e42e34f24e41bd308aa23e99ba18ca7cf7d4cc0fecbff875cfdc4e06d1bf",
				"dweb:/ipfs/QmSx5atQGBZkvga9e8MTYzNWrKCToLgTC1VzzYK2xdFt9f"
			]
		},
		"sol-cerby-swap-v1/openzeppelin/utils/cryptography/draft-EIP712.sol": {
			"keccak256": "0x2e7463e1320985f7f27f90f47ef47950b47e020b39bbebb556b06830615a2678",
			"license": "MIT",
			"urls": [
				"bzz-raw://ab18fb60e701f2601952a46c00705270b0b0f083544bccc6031c2717740767c6",
				"dweb:/ipfs/QmcQCpNuMUbAo6ss3fzBqT5XgQhM7fsZUutmowQpQz6gHK"
			]
		},
		"sol-cerby-swap-v1/openzeppelin/utils/introspection/ERC165.sol": {
			"keccak256": "0x80cff4f25810ab85caa3f5839b7cb5b7683a9540da82268e2b9f422e0d4d58e6",
			"license": "MIT",
			"urls": [
				"bzz-raw://1858a5438e273c2f48db04bfa9e49e5a5bbf5ccb36b1c666756647aacfca2a04",
				"dweb:/ipfs/QmR1bYQhYWtRLLXMyRJYtZRaEmXkbFGWHcd6a59VKrFgMR"
			]
		},
		"sol-cerby-swap-v1/openzeppelin/utils/introspection/IERC165.sol": {
			"keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
			"license": "MIT",
			"urls": [
				"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
				"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
			]
		},
		"sol-cerby-swap-v1/openzeppelin/utils/structs/EnumerableSet.sol": {
			"keccak256": "0x8acb4b6655fa152ff8fc79cd0682c2862d56512547bcaa591c5bcc2657e6b86a",
			"license": "MIT",
			"urls": [
				"bzz-raw://39a93fe24137aa2e913b16f2bec6746d59696dc9cf2b62065366357b68d5689d",
				"dweb:/ipfs/Qmb9pgaSpvASizwM5CaRqtA1x1RRd74PQCahvXTuZZMx2V"
			]
		},
		"sol-defifactory-token/CerbyBasedToken.sol": {
			"keccak256": "0x3d94c5cf4972ecafeedeca05904f9e2d8abcb2327351164abd9e08ccc3228556",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://93ce686807e0de76ff45e030e72ddf9d64622460a902e33824cf1d2066579e2d",
				"dweb:/ipfs/QmSf4tzupXHYM397b2cV8Q1HcVcQ8vMbqLhn9WVfgf8zC2"
			]
		}
	},
	"version": 1
}