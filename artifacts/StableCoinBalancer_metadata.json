{
	"compiler": {
		"version": "0.8.12+commit.f00d7308"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					}
				],
				"name": "AccountIsMissingRole",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "CanOnlyRenounceRoleForSelf",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "previousAdminRole",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "newAdminRole",
						"type": "bytes32"
					}
				],
				"name": "RoleAdminChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleGranted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleRevoked",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "ROLE_ADMIN",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amountUsdcIn",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "_isMint",
						"type": "bool"
					}
				],
				"name": "addLiquidity",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "balancePrice",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amountCerUsdIn",
						"type": "uint256"
					}
				],
				"name": "buyUsdc",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					}
				],
				"name": "getRoleAdmin",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "getRoleMember",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					}
				],
				"name": "getRoleMemberCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getUsdcPool",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "grantRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "role",
								"type": "bytes32"
							},
							{
								"internalType": "address",
								"name": "addr",
								"type": "address"
							}
						],
						"internalType": "struct RoleAccess[]",
						"name": "roles",
						"type": "tuple[]"
					}
				],
				"name": "grantRolesBulk",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "hasRole",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"name": "onERC1155BatchReceived",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"name": "onERC1155Received",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_percent",
						"type": "uint256"
					}
				],
				"name": "removeLiquidity",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "renounceRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "revokeRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amountUsdcIn",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "_isMint",
						"type": "bool"
					}
				],
				"name": "sellUsdc",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "_interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_poolId",
						"type": "uint256"
					}
				],
				"name": "withdrawLP",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_tokens",
						"type": "address[]"
					}
				],
				"name": "withdrawTokens",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"getRoleAdmin(bytes32)": {
					"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
				},
				"getRoleMember(bytes32,uint256)": {
					"details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
				},
				"getRoleMemberCount(bytes32)": {
					"details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
				},
				"grantRole(bytes32,address)": {
					"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
				},
				"hasRole(bytes32,address)": {
					"details": "Returns `true` if `account` has been granted `role`."
				},
				"renounceRole(bytes32,address)": {
					"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
				},
				"revokeRole(bytes32,address)": {
					"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"sol-defifactory-token/StableCoinBalancer.sol": "StableCoinBalancer"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"sol-cerby-swap-v1/openzeppelin/access/AccessControl.sol": {
			"keccak256": "0x625f544696a4c39ea49999e0a17846a97f67f1c86f9baec4e408e4d7088a0081",
			"license": "MIT",
			"urls": [
				"bzz-raw://cf5daee5cf45dcd95d749efaab6154f725e9e4c6da6cd4ef294e0e919eaf82af",
				"dweb:/ipfs/QmW3M3YzDBTcbYVpEmWKWssyd37QsWD9S4zrsWaq5bRN4E"
			]
		},
		"sol-cerby-swap-v1/openzeppelin/access/AccessControlEnumerable.sol": {
			"keccak256": "0x400e79893c3e86fe147ce1e6916987d8f90351136496bb9fa7d0c33ecf194378",
			"license": "MIT",
			"urls": [
				"bzz-raw://6f3c9ea28f53c46abce10f71c3a61720a435ff0667414d48b4a94d590c8fca8e",
				"dweb:/ipfs/QmTcBSf9QJh4Q5QbLewHquxcZ8kcWe1pBCVZvxuMaqP28F"
			]
		},
		"sol-cerby-swap-v1/openzeppelin/access/IAccessControl.sol": {
			"keccak256": "0x39cf384e5d33ace3043a89089ab368b4c3a93e8b209c928b194f02dc037213b4",
			"license": "MIT",
			"urls": [
				"bzz-raw://2e843a398bf56fa1bc11580bc539f6452ec3c317a161d7bc70d6a1205763e8f9",
				"dweb:/ipfs/QmToa4vPGpg6S5n29MGEbACXS42euGLWcvBixo7txkrcdD"
			]
		},
		"sol-cerby-swap-v1/openzeppelin/access/IAccessControlEnumerable.sol": {
			"keccak256": "0xaac4e60985b08b34f95df096f9f7818586ae2157f426e6aa30abeceee47a7090",
			"license": "MIT",
			"urls": [
				"bzz-raw://2649ee0862526030b38cd15c65a8d0d61614d6d3f526de8b1b48ccbdf8672cd4",
				"dweb:/ipfs/QmPwCik5omsKx4zkwyS8hYT9NwQMvpZ84cS8XawRNXspuJ"
			]
		},
		"sol-cerby-swap-v1/openzeppelin/token/ERC1155/IERC1155Receiver.sol": {
			"keccak256": "0xc743d2235b8854045c308d2f8f1ed88efed6c2bebf2b7a4a51ea42480c82e566",
			"license": "MIT",
			"urls": [
				"bzz-raw://05e54e397a053f319187999ef4d65446a7f15f693ddd66dfaed4d856f67dac4e",
				"dweb:/ipfs/QmbGTFVdZxShg76UPcuLAXm6HBjZx3Vn6CL1eaBhV9rST1"
			]
		},
		"sol-cerby-swap-v1/openzeppelin/token/ERC1155/utils/ERC1155Holder.sol": {
			"keccak256": "0xc17dae2baabdf6f414ee129c3f07324309aaa8ae63297ab55cada28a6969a81b",
			"license": "MIT",
			"urls": [
				"bzz-raw://80777f3b7c186477704a96b29deb2bce56c281a6618aeda284a2a0f94d635c3c",
				"dweb:/ipfs/QmPrbgsuseYdJ1hmLHZ2dnxdHfqiFHZBqBSZZANwCEjJQr"
			]
		},
		"sol-cerby-swap-v1/openzeppelin/token/ERC1155/utils/ERC1155Receiver.sol": {
			"keccak256": "0xcc2f0385b13c01bce005ce704dd4bf2a22c6d668baac041dddaaec7af45eaf33",
			"license": "MIT",
			"urls": [
				"bzz-raw://ffaceca553d86013c57ebe149eda285676787c6cf2104c8f4625735e761139e8",
				"dweb:/ipfs/QmYiY2rirqMZbx4jjrY94bxte3iLJViet8kj5b1FTGeDp7"
			]
		},
		"sol-cerby-swap-v1/openzeppelin/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"sol-cerby-swap-v1/openzeppelin/utils/Strings.sol": {
			"keccak256": "0x301f818a468d58adca752b80f0c0332628a61227e726bb1b04020805868e3806",
			"license": "MIT",
			"urls": [
				"bzz-raw://d4053cc4d0a627c22c85f1f26b8332220d1f08d2978efa5e4e069b7e706639ba",
				"dweb:/ipfs/QmQSu9Z5SmAE1gSibNJSmyHDbQQwFtbdF3Pn9JkCKLGw4n"
			]
		},
		"sol-cerby-swap-v1/openzeppelin/utils/introspection/ERC165.sol": {
			"keccak256": "0x80cff4f25810ab85caa3f5839b7cb5b7683a9540da82268e2b9f422e0d4d58e6",
			"license": "MIT",
			"urls": [
				"bzz-raw://1858a5438e273c2f48db04bfa9e49e5a5bbf5ccb36b1c666756647aacfca2a04",
				"dweb:/ipfs/QmR1bYQhYWtRLLXMyRJYtZRaEmXkbFGWHcd6a59VKrFgMR"
			]
		},
		"sol-cerby-swap-v1/openzeppelin/utils/introspection/IERC165.sol": {
			"keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
			"license": "MIT",
			"urls": [
				"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
				"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
			]
		},
		"sol-cerby-swap-v1/openzeppelin/utils/structs/EnumerableSet.sol": {
			"keccak256": "0x8acb4b6655fa152ff8fc79cd0682c2862d56512547bcaa591c5bcc2657e6b86a",
			"license": "MIT",
			"urls": [
				"bzz-raw://39a93fe24137aa2e913b16f2bec6746d59696dc9cf2b62065366357b68d5689d",
				"dweb:/ipfs/Qmb9pgaSpvASizwM5CaRqtA1x1RRd74PQCahvXTuZZMx2V"
			]
		},
		"sol-defifactory-token/StableCoinBalancer.sol": {
			"keccak256": "0x0dab55b19d30852e76afce00963d99ee0f354d387624a7cb9b0aed948ec97094",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://a2c82638563554ce017aa858123acd8eed146180ebce5917919801a8f053b62c",
				"dweb:/ipfs/QmYEpLvkZW5z31zQAEdXGHoXuwEkZWRbNrXekJ4vZfbVTG"
			]
		},
		"sol-defifactory-token/interfaces/ICerbySwapLP1155V1.sol": {
			"keccak256": "0xa8ed06d1842094693bb1dfc81273adbfb98d15f03a2d082f9991b402cc94190b",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://fdb2fe0ab4c791235716ae9004209871ad1de9afd5ad2b4ff5bc64f681c94efe",
				"dweb:/ipfs/QmX6ccYaNZBRdYpyV2ZxVyDaLM5ctAgZxZXGmrzUrRGUR6"
			]
		},
		"sol-defifactory-token/interfaces/ICerbySwapV1.sol": {
			"keccak256": "0x177dd0dfb6f91a49c24abe6d6a78773aefee6e2fe75a82b6cc0ecf709d7ea476",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://714920a33fab7cb88a5448c34c3ea9515ada7c7d2850894d72a1cecad6c0cf70",
				"dweb:/ipfs/QmVdW8KdQXec4nf6aDTeqiHKqYzqZPkejskB6TzcgtHrAC"
			]
		},
		"sol-defifactory-token/interfaces/ICerbyToken.sol": {
			"keccak256": "0x4e54c2b2e26a8614ad9d19d94b0cf97c134f6b6f333557dd41d5d0981465f92f",
			"license": "MIT",
			"urls": [
				"bzz-raw://b0fa49f30eed7d09333d1e4463f16bb0a253ddf4a85fd04bac7f0d2064472e6a",
				"dweb:/ipfs/Qmas97Mp7VUZkU6vb15Ed9WV63kcER9SRdt76m7DDtic5u"
			]
		},
		"sol-defifactory-token/interfaces/IWeth.sol": {
			"keccak256": "0x44972b2bdaa8738522aef13025f55231fe88fdb7948ea1202559de228b7ebea3",
			"license": "MIT",
			"urls": [
				"bzz-raw://0bef19ada1eb7ad0a86ad8efb34fe10af1efbf5ce1e2d13279aa9724d9c6823d",
				"dweb:/ipfs/QmakzsXrkG88yB5HLmWXWp18V4pXGJUNSRWD4gB6uVRbZU"
			]
		}
	},
	"version": 1
}